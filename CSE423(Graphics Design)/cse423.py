# -*- coding: utf-8 -*-
"""CSE423.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vS68oIZl4Z20CQ4IDizfq8NY_rkSOt6W
"""

!pip install tensorflow==1.15.0

!pip install -q lucid>=0.2.3
!pip install -q moviepy

import numpy as np
import json
import moviepy.editor as mvp
from google.colab import files
import tensorflow.compat.v1.gfile as gfile
import lucid.misc.io.showing as show

from lucid.misc.gl.glcontext import create_opengl_context

# Now it's safe to import OpenGL and EGL functions
import OpenGL.GL as gl
from OpenGL.GLU import *

# create_opengl_context() creates GL context that is attached to an
# offscreen surface of specified size. Note that rendering to buffers
# of different size and format is still possible with OpenGL Framebuffers.
#
# Users are expected to directly use EGL calls in case more advanced
# context management is required.
WIDTH, HEIGHT = 1000,1000
create_opengl_context((WIDTH, HEIGHT))
    
# OpenGL context is available here.

print(gl.glGetString(gl.GL_VERSION))
print(gl.glGetString(gl.GL_VENDOR)) 
#print(gl.glGetString(gl.GL_EXTENSIONS))

# Let's render something!
import random
randomlistx = random.sample(range(-100, 100), 50)
randomlisty = random.sample(range(-100, 100), 50)
randomlistx_new = []
randomlisty_new = []

for i in randomlistx:
    randomlistx_new.append(i/100)
for i in randomlisty:
    randomlisty_new.append(i/100)

gl.glClear(gl.GL_COLOR_BUFFER_BIT)
count1 = 0
count2 = 0
while count1 < 50:
    while count2 < 50:
      gl.glColor3f(0,.5,0)
      gl.glBegin(gl.GL_POINTS)
      gl.glVertex2f(randomlistx_new[count1],randomlisty_new[count2])
      count1 += 1
      count2 += 1

      gl.glEnd()




#gl.glColor3f(145,0,0)
#gl.glBegin(gl.GL_QUADS)
#gl.glVertex2f(.4,0)
#gl.glVertex2f(-.4,0)
#gl.glVertex2f(0,.4)
#gl.glVertex2f(0,-.4)

#gl.glEnd()

# Let's render something!

gl.glClear(gl.GL_COLOR_BUFFER_BIT)


gl.glColor3f(0,.5,0)
gl.glBegin(gl.GL_POINTS)

#door



gl.glVertex2f(.05,-.45)



gl.glEnd()







gl.glColor3f(145,0,0)
gl.glBegin(gl.GL_LINES)

#Roof
gl.glVertex2f(.4,.2)
gl.glVertex2f(-.4,.2)
gl.glVertex2f(.4,.2)
gl.glVertex2f(0,.8)
gl.glVertex2f(-.4,.2)
gl.glVertex2f(0,.8)
#
#body
gl.glVertex2f(.4,-.6)
gl.glVertex2f(.4,.2)
gl.glVertex2f(-.4,-.6)
gl.glVertex2f(-.4,.2)
gl.glVertex2f(.4,-.6)
gl.glVertex2f(-.4,-.6)
#
#door
gl.glVertex2f(-.1,-.6)
gl.glVertex2f(-.1,-.3)
gl.glVertex2f(.1,-.6)
gl.glVertex2f(.1,-.3)
gl.glVertex2f(-.1,-.3)
gl.glVertex2f(.1,-.3)
#
#window1
gl.glVertex2f(-.2,0)
gl.glVertex2f(-.2,-.15)
gl.glVertex2f(-.2,0)
gl.glVertex2f(-.35,0)
gl.glVertex2f(-.35,0)
gl.glVertex2f(-.35,-.15)
gl.glVertex2f(-.2,-.15)
gl.glVertex2f(-.35,-.15)
#
#winmdow2
gl.glVertex2f(.2,0)
gl.glVertex2f(.2,-.15)
gl.glVertex2f(.2,0)
gl.glVertex2f(.35,0)
gl.glVertex2f(.35,0)
gl.glVertex2f(.35,-.15)
gl.glVertex2f(.2,-.15)
gl.glVertex2f(.35,-.15)
gl.glEnd()

img_buf = gl.glReadPixelsub(0, 0, WIDTH, HEIGHT, gl.GL_RGB, gl.GL_UNSIGNED_BYTE)
img = np.frombuffer(img_buf, np.uint8).reshape(HEIGHT, WIDTH, 3)[::-1]
show.image(img/255.0)

